name: Test IPTV Links

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [iptv, iptvdl]  # 分别处理 'iptv.txt' 和 'iptvdl.txt' 文件

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Download links from GitHub
        run: |
          # 下载 IPTV 和 IPTVDL 链接到根目录
          curl -L -o iptv.txt https://raw.githubusercontent.com/tangdeyi11/udpxy-text/main/iptv.txt
          curl -L -o iptvdl.txt https://raw.githubusercontent.com/tangdeyi11/udpxy-text/main/iptvdl.txt

      - name: Initialize output files
        run: |
          # 如果文件不存在，则初始化文件
          touch iptv-test.txt iptvdl-test.txt

      - name: Test links in parallel
        run: |
          input_file="${{ matrix.file }}.txt"
          output_file="${{ matrix.file }}-test.txt"
          echo "🔍 Testing links from $input_file..." > "$output_file"

          export OUTPUT_FILE="$output_file"  # 传递为环境变量供 subshell 使用

          cat "$input_file" | grep -v '^#' | grep -v '^$' | xargs -I {} -P 10 bash -c '
            url="{}"
            status="⏳ $url - 测试中..."
            if timeout 10s curl -s --max-time 12 --speed-time 5 --speed-limit 1024 "$url" -o /dev/null; then
              status="✅ $url - 可用（10秒内持续下载）"
            else
              code=$?
              if [ $code -eq 124 ]; then
                status="⚠️ $url - 有拦截（10秒内下载结束）"
              else
                status="❌ $url - 无法访问（连接失败）"
              fi
            fi
            echo "$status" >> "$OUTPUT_FILE"
          '

      - name: Verify the output files
        run: |
          echo "Verifying the output files in the root directory"
          ls -l iptv-test.txt iptvdl-test.txt
          cat iptv-test.txt
          cat iptvdl-test.txt

      - name: Commit and push results
        run: |
          # 确保文件被正确创建并添加到 Git 仓库
          echo "Verifying the output files before committing"
          ls -l iptv-test.txt iptvdl-test.txt
          git add --force iptv-test.txt iptvdl-test.txt  # 强制添加文件到 Git
          git status  # 查看 Git 当前状态
          git commit -m "📡 自动更新 IPTV 测试结果" || echo "Nothing to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
